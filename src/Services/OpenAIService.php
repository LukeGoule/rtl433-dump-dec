<?php

namespace RTL433DumpDec\Services;

use OpenAI\Client;
use Symfony\Component\Console\Output\OutputInterface;

class OpenAIService
{
    private Client $client;

    private EnvService $envService;

    public function __construct() {
        $this->envService = new EnvService();
        $this->client = \OpenAI::client( $this->loadAPIKey() );
    }

    public function analyseData( array $threeDData, OutputInterface $output ) {
        $response = $this->client->chat()->create( [
            "model" => "gpt-4o",
            "messages" => [
                [
                    'role' => 'user',
                    'content' => $this->encodeContextClues() . 'Analyse the following 3D array data and provide a report on patterns in the data: ' . json_encode( $threeDData )
                ]
            ]
        ] );

        $output->writeln( $response->choices[0]->message->content );
    }

    private function encodeContextClues() : string {
        $str = "Here is a list of information relating to the request which may help you understand the given dataset:\n";

        foreach ( $this->contextClues() as $index => $clue ) {
            $str .= "$index - $clue\n";
        }

        return $str;
    }

    private function contextClues() : array {
        return [
            "The data is dumped from RTL-433, meaning it is is radio data.",
            "This is the raw output of my car key, captured on an RTL-SDR.",
            "The groups of data are 8 bit integers of raw data.",
            "I have no clues as to the formatting method of the data.",
            "I am looking for anything which could allow me to validate the data, such as checksums, patterns, etc.",
            "Each top-level array item is a radio signal pulse generated by the key",
            "Each second-level array is a group of bytes.",
            "The lowest array items are the individual bytes received by the SDR."
        ];
    }

    public function test() : void {

        print_r( $this->client->chat()->create([
            'model' => 'gpt-4',
            'messages' => [
                ['role' => 'user', 'content' => 'Hello!'],
            ],
        ]) );
        die;
    }

    private function loadAPIKey() : string {
        return $this->envService->get( "OPENAI_API_KEY" );
    }
}